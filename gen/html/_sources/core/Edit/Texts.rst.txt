####################################
  Texts Module 
####################################
 
++++++++
  About  
++++++++
 
+++++++++++++++++
  Command Guide  
+++++++++++++++++
 
Module Texts defines the 'text' abstract data type used pervasively in the Oberon system.
 
+++++++++++++
  API Guide  
+++++++++++++
 
++++++++++++++++
  Dependencies  
++++++++++++++++
 
.. code-block:: none
 
   Files Fonts MIME
 
+++++++++++++
  Constants  
+++++++++++++
.. code-block:: none
 
 (*scanner symbol classes*)
    Inval* = 0;         (*invalid symbol*)
    Name* = 1;          (*name s (length len)*)
    String* = 2;        (*literal string s (length len)*)
    Int* = 3;           (*integer i (decimal or hexadecimal)*)
    Real* = 4;          (*real number x*)
    Char* = 6;          (*special character c*)

    (* TextBlock = TextTag offset run {run} "0" len {AsciiCode}.
      run = fnt [name] col voff len. *)

    TAB = 9X; CR = 0DX; NL = 0AX; 
    TextTag = 0F1X;
    replace* = 0; insert* = 1; delete* = 2; unmark* = 3;  (*op-codes*)
 
+++++++++
  Types  
+++++++++
.. code-block:: none
 
 Piece = POINTER TO PieceDesc;
    PieceDesc = RECORD
      f: Files.File;
      off, len: LONGINT;
      fnt: Fonts.Font;
      col, voff: INTEGER;
      prev, next: Piece
    END;

    Text* = POINTER TO TextDesc;
    Notifier* = PROCEDURE (T: Text; op: INTEGER; beg, end: LONGINT);
    Consumer* = PROCEDURE (T: Text; beg, end: LONGINT);
    TextDesc* = RECORD
      len*,sent*,cap*: LONGINT;
      mime*: MIME.Type; 
      changed*: BOOLEAN;
      notify*: Notifier;
      out*: Consumer;
      trailer: Piece;
      pce: Piece;  (*cache*)
      org: LONGINT (*cache*)
    END;

    Reader* = RECORD
      eot*: BOOLEAN;
      fnt*: Fonts.Font;
      col*, voff*: INTEGER;
      ref: Piece;
      org: LONGINT;
      off: LONGINT;
      rider: Files.Rider
    END;

    Scanner* = RECORD (Reader)
      nextCh*: CHAR;
      line*, class*: INTEGER;
      i*: LONGINT;
      x*: REAL;
      y*: LONGREAL;
      codepoint*: INTEGER;
      len*: INTEGER;
      s*: ARRAY 32 OF CHAR
    END;

    Buffer* = POINTER TO BufDesc;
    BufDesc* = RECORD
      len*: LONGINT;
      header, last: Piece
    END;

    Writer* = RECORD
      buf*: Buffer;
      fnt*: Fonts.Font;
      col*, voff*: INTEGER;
      rider: Files.Rider
    END;     
 
++++++++++++
  Variables  
++++++++++++
.. code-block:: none
 
 TrailerFile: Files.File;
 
++++++++++++++++++++++++++++
  Functions and Procedures  
++++++++++++++++++++++++++++
.. code-block:: none
 
::
  PROCEDURE Trailer(): Piece;

::
  PROCEDURE Load* (VAR R: Files.Rider; T: Text);

::
  PROCEDURE Open* (T: Text; name: ARRAY OF CHAR);

::
  PROCEDURE Store* (VAR W: Files.Rider; T: Text);

::
  PROCEDURE Close*(T: Text; name: ARRAY OF CHAR);

::
  PROCEDURE OpenBuf* (B: Buffer);

::
  PROCEDURE FindPiece (T: Text; pos: LONGINT; VAR org: LONGINT; VAR pce: Piece);

::
  PROCEDURE SplitPiece (p: Piece; off: LONGINT; VAR pr: Piece);

::
  PROCEDURE Save* (T: Text; beg, end: LONGINT; B: Buffer);

::
  PROCEDURE Copy* (SB, DB: Buffer);

::
  PROCEDURE Insert* (T: Text; pos: LONGINT; B: Buffer);

::
  PROCEDURE Append* (T: Text; B: Buffer);

::
  PROCEDURE Delete* (T: Text; beg, end: LONGINT; B: Buffer);

::
  PROCEDURE ChangeLooks* (T: Text; beg, end: LONGINT; sel: SET; fnt: Fonts.Font; col, voff: INTEGER);

::
  PROCEDURE Attributes*(T: Text; pos: LONGINT; VAR fnt: Fonts.Font; VAR col, voff: INTEGER);

::
  PROCEDURE OpenReader* (VAR R: Reader; T: Text; pos: LONGINT);

::
  PROCEDURE Read* (VAR R: Reader; VAR ch: CHAR);

::
  PROCEDURE UnicodeWidth* (codepoint: INTEGER): INTEGER;

::
  PROCEDURE ReadUnicodeRest(VAR R: Reader; ch: CHAR; VAR codepoint: INTEGER);

::
  PROCEDURE ReadUnicode* (VAR R: Reader; VAR codepoint: INTEGER);

::
  PROCEDURE Pos* (VAR R: Reader): LONGINT;

::
  PROCEDURE OpenScanner* (VAR S: Scanner; T: Text; pos: LONGINT);

::
  PROCEDURE Ten(n: INTEGER): REAL;

::
  PROCEDURE Scan* (VAR S: Scanner);

::
  PROCEDURE OpenWriter* (VAR W: Writer);

::
  PROCEDURE SetFont* (VAR W: Writer; fnt: Fonts.Font);

::
  PROCEDURE SetColor* (VAR W: Writer; col: INTEGER);

::
  PROCEDURE SetOffset* (VAR W: Writer; voff: INTEGER);

::
  PROCEDURE Write* (VAR W: Writer; ch: CHAR);

::
  PROCEDURE WriteUnicode* (VAR W: Writer; codepoint: INTEGER);

::
  PROCEDURE WriteLn* (VAR W: Writer);

::
  PROCEDURE WriteString* (VAR W: Writer; s: ARRAY OF CHAR);

::
  PROCEDURE WriteInt* (VAR W: Writer; x, n: LONGINT);

::
  PROCEDURE WriteHex* (VAR W: Writer; x: LONGINT);

::
 PROCEDURE WriteReal* (VAR W: Writer; x: REAL; n: INTEGER);

::
  PROCEDURE WriteRealFix* (VAR W: Writer; x: REAL; n, k: INTEGER);

::
  PROCEDURE WritePair(VAR W: Writer; ch: CHAR; x: LONGINT);

::
  PROCEDURE WriteClock* (VAR W: Writer; d: LONGINT);
 
++++++++++++++++++++
  Development Guide 
++++++++++++++++++++
 

 
https://github.com/io-core/Edit/blob/main/Texts.Mod

