####################################
  Display Module 
####################################
 
++++++++
  About  
++++++++
 
+++++++++++++++++
  Command Guide  
+++++++++++++++++
 
Module Display implements the drawing primitives for the frame buffer device in Oberon.

A pattern is an array of bytes; the first is its width (< 32), the second its height, the rest the raster data.
 
+++++++++++++
  API Guide  
+++++++++++++
 
++++++++++++++++
  Dependencies  
++++++++++++++++
 
.. code-block:: none
 
   SYSTEM
 
+++++++++++++
  Constants  
+++++++++++++
.. code-block:: none
 
 
    black* = 0;  (*black = background*)
    replace* = 0; paint* = 1; invert* = 2;  (*modes*)
    (* base = 0E7F00H; *)  (*adr of 1024 x 768 pixel, monocolor display frame*)
    (* In the emulator, the frame buffer address might be moved depending on memory configuration *)
 
+++++++++
  Types  
+++++++++
.. code-block:: none
 
 
    Frame* = POINTER TO FrameDesc;
    FrameMsg* = RECORD END ;
    Handler* = PROCEDURE (F: Frame; VAR M: FrameMsg);
    FrameDesc* = RECORD next*, dsc*: Frame;
        X*, Y*, W*, H*: INTEGER;
        handle*: Handler
      END ;
 
++++++++++++
  Variables  
++++++++++++
.. code-block:: none
 
 
    Base*, Width*, Height*, Depth*, white*, Span, Colors, Colmask, pp8, pp32: INTEGER;
    arrow*, star*, hook*, updown*, block*, top*, bot*, cross*, grey*: INTEGER;
    (*a pattern is an array of bytes; the first is its width (< 32), the second its height, the rest the raster*)
 
++++++++++++++++++++++++++++
  Functions and Procedures  
++++++++++++++++++++++++++++
.. code-block:: none
 
---
**Handle** dispatches a handle message to the appropriate frame.
::
  PROCEDURE Handle*(F: Frame; VAR M: FrameMsg);

---
**Dot** modifies a pixel on the display.
::
  PROCEDURE Dot*(col, x, y, mode: INTEGER);

---
**ReplConst** paints a color into a rectangular area or inverts the area.
::
  PROCEDURE ReplConst*(col, x, y, w, h, mode: INTEGER);

---
**CopyPattern** copies a bitmap to a location in a color, possibly inverting the destination area.
::
  PROCEDURE CopyPattern*(col, patadr, x, y, mode: INTEGER);  (*only for modes = paint, invert*)

---
**CopyBlock** copies a rectangular area to a location on the display.
::
  PROCEDURE CopyBlock*(sx, sy, w, h, dx, dy, mode: INTEGER); (*only for mode = replace*)

---
**ReplPattern** replicates a pattern over a rectangular area of the display.
::
  PROCEDURE ReplPattern*(col, patadr, x, y, w, h, mode: INTEGER);

---
**InitResolution** determines the frame buffer base address and screen geometry.
::
  PROCEDURE InitResolution;

---
**The initialzation code for this module** detects the screen origin and geometry and then installs icons for cursors and a background pattern.
 
++++++++++++++++++++
  Development Guide 
++++++++++++++++++++
 

(NW 5.11.2013 / 17.1.2019 / PDW 21.1.2019 / JS 2020 / CP 2020)

**Display** is the interface to the hardware framebuffer in Oberon.

On initialization the origial base address is queried for a magic value to determine
if the base has moved and if the resolution is something other than 1024x768.

A pattern is an array of bytes; the first is its width (< 32), the second its height, the rest the raster data.
 
https://github.com/io-core/Oberon/blob/main/Display.Mod

