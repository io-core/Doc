####################################
  FileDir Module 
####################################
 
++++++++
  About  
++++++++
 
+++++++++++++++++
  Command Guide  
+++++++++++++++++
 
Module FileDir implements the following operations on the binary tree of directory pages stored on disk:

* inserting directory entries
* deleting directory entries
* searching for directory entries
* enumerating directory entries
* initializing the Kernel sector table bitmap

FileDir is not intended for use by regular programs. The FileDir interface is used by the Files module which regular programs may access.
 
+++++++++++++
  API Guide  
+++++++++++++
 
++++++++++++++++
  Dependencies  
++++++++++++++++
 
.. code-block:: none
 
   SYSTEM Kernel
 
+++++++++++++
  Constants  
+++++++++++++
.. code-block:: none
 
 
        FnLength*    = 32;
        SecTabSize*   = 64;
        ExTabSize*   = 12;
        SectorSize*   = 1024;
        IndexSize*   = SectorSize DIV 4;
        HeaderSize*  = 352;
        DirRootAdr*  = 29;
        DirPgSize*   = 24;
        N = DirPgSize DIV 2;
        DirMark*    = 9B1EA38DH;
        HeaderMark* = 9BA71D86H;
        FillerSize = 52;
 
+++++++++
  Types  
+++++++++
.. code-block:: none
 
 
    DiskAdr         = INTEGER;
    FileName*       = ARRAY FnLength OF CHAR;
    SectorTable*    = ARRAY SecTabSize OF DiskAdr;
    ExtensionTable* = ARRAY ExTabSize OF DiskAdr;
    EntryHandler*   = PROCEDURE (name: FileName; sec: DiskAdr; VAR continue: BOOLEAN);

    FileHeader* =
      RECORD (*first page of each file on disk*)
        mark*: INTEGER;
        name*: FileName;
        aleng*, bleng*, date*: INTEGER;
        ext*:  ExtensionTable;
        sec*: SectorTable;
        fill: ARRAY SectorSize - HeaderSize OF BYTE;
      END ;

    FileHd* = POINTER TO FileHeader;
    IndexSector* = ARRAY IndexSize OF DiskAdr;
    DataSector* = ARRAY SectorSize OF BYTE;

    DirEntry* =  (*B-tree node*)
      RECORD
        name*: FileName;
        adr*:  DiskAdr; (*sec no of file header*)
        p*:    DiskAdr  (*sec no of descendant in directory*)
      END ;

      (* If name[30] = 0 and name[31] > 0 then name[31] indicates which kind of
         entity other than a regular file that this is e.g. a pipe, subdir, link, etc.*)

    DirPage*  =
      RECORD mark*:  INTEGER;
        m*:     INTEGER;
        p0*:    DiskAdr;  (*sec no of left descendant in directory*)
        fill:  ARRAY FillerSize OF BYTE;
        e*:  ARRAY DirPgSize OF DirEntry
      END ;
 
++++++++++++
  Variables  
++++++++++++
.. code-block:: none
 

 
++++++++++++++++++++++++++++
  Functions and Procedures  
++++++++++++++++++++++++++++
.. code-block:: none
 
---
**Search** finds the DiskAdr for a given FileName.
::
  PROCEDURE Search*(name: FileName; VAR A: DiskAdr);

---
**insert** is the recursive procedure for finding a DirEntry to place a FileName in.
::
  PROCEDURE insert(name: FileName;

---
**Insert** starts the process of finding a DirEntry to place a FileName in.
::
  PROCEDURE Insert*(name: FileName; fad: DiskAdr);

---
**underflow** handles the case of DirPage underflow on DirEntry deletion.
::
  PROCEDURE underflow(VAR c: DirPage;  (*ancestor page*)

---
**delete** is the recursive function that searches for and removes a DirEntry.
::
  PROCEDURE delete(name: FileName;

---
**del** is the interior procedure that re-writes a DirPage to remove a DirEntry.
::
    PROCEDURE del(VAR a: DirPage; R: INTEGER; dpg1: DiskAdr; VAR h: BOOLEAN);

---
**Delete** starts the process of removing a DirEntry with a given FileName.
::
  PROCEDURE Delete*(name: FileName; VAR fad: DiskAdr);

---
**enumerate** is the recursive function that iteratively calls a passed-in procedure on DirEntries with names that match a prefix.
::
  PROCEDURE enumerate(prefix:   ARRAY OF CHAR;

---
**Enumerate** starts the process of listing directory entries matching a prefix.
::
  PROCEDURE Enumerate*(prefix: ARRAY OF CHAR; proc: EntryHandler);

---
**Init** preapres Oberon to use the disk by marking used sectors in the Kernel sector map.
::
  PROCEDURE Init*;

::
    PROCEDURE MarkSectors(VAR A: ARRAY OF DiskAdr; k: INTEGER);

::
      PROCEDURE sift(VAR A: ARRAY OF DiskAdr; L, R: INTEGER);

::
    PROCEDURE TraverseDir(VAR A: ARRAY OF DiskAdr; VAR k: INTEGER; dpg: DiskAdr);
 
++++++++++++++++++++
  Development Guide 
++++++++++++++++++++
 
    (NW 12.1.86 / 23.8.90 / 15.8.2013)
 
https://github.com/io-core/Files/blob/main/FileDir.Mod

