####################################
  OXS Module 
####################################
 
++++++++
  About  
++++++++
 
+++++++++++++++++
  Command Guide  
+++++++++++++++++
 
Module OXS does lexical analysis of the Oberon source code and defines symbols and operations
 
+++++++++++++
  API Guide  
+++++++++++++
 
++++++++++++++++
  Dependencies  
++++++++++++++++
 
.. code-block:: none
 
   SYSTEM Texts Oberon
 
+++++++++++++
  Constants  
+++++++++++++
.. code-block:: none
 

    IdLen* = 32;
    NKW = 34;  (*nof keywords*)
    maxExp = 38; stringBufSize = 256;

    (*lexical symbols*)
    null = 0; times* = 1; rdiv* = 2; div* = 3; mod* = 4;
    and* = 5; plus* = 6; minus* = 7; or* = 8; eql* = 9;
    neq* = 10; lss* = 11; leq* = 12; gtr* = 13; geq* = 14;
    in* = 15; is* = 16; arrow* = 17; period* = 18;
    char* = 20; int* = 21; real* = 22; false* = 23; true* = 24;
    nil* = 25; string* = 26; not* = 27; lparen* = 28; lbrak* = 29;
    lbrace* = 30; ident* = 31;
    if* = 32; while* = 34; repeat* = 35; case* = 36; for* = 37;
    comma* = 40; colon* = 41; becomes* = 42; upto* = 43; rparen* = 44;
    rbrak* = 45; rbrace* = 46; then* = 47; of* = 48; do* = 49;
    to* = 50; by* = 51; semicolon* = 52; end* = 53; bar* = 54;
    else* = 55; elsif* = 56; until* = 57; return* = 58;
    array* = 60; record* = 61; pointer* = 62; const* = 63; type* = 64;
    var* = 65; procedure* = 66; begin* = 67; import* = 68; module* = 69; eot* = 70;
    notasymbol* = -1;
    go* = 100; on* = 101; def* = 102; dim* = 103; let* = 104; rem* = 105; sub* = 106; base* = 107;
    data* = 108; goto* = 109;  next* = 110;  read* = 110;  step* = 112; stop* = 113; gosub* = 114;
    input* = 115; print* = 116; option* = 117; restore* = 118; randomize* = 119; eol* = 120;
    func* = 150; void* = 151; package* = 152; rune* = 153; eqeql* = 154; pcnt* = 155; andand* = 156; oror* = 157;
(*    BADARCH* = 0; RISC5* = 1; X8664* = 2; ARM64* = 3; ARM32* = 4; RISCV64* = 5; RISCV32* = 6; CORTEX4* = 7; CORTEX0* = 8; WASM* = 9; ERISC5* = 10; *)
     BADARCH* = 0;
     RISC5*   = 6517618;    (* "rsc" 0x00637372 *)
     ERISC5*  = 7878770;    (* "r8x" 0x00783872 *)
     X8664*   = 7878761;    (* "i8x" 0x00783869 *)
     CORTEX4* = 7877731;    (* "c4x" 0x00783463 *)
     CORTEX0* = 7876707;    (* "c0x" 0x00783063 *)
     ARM64*   = 7878753;    (* "a8x" 0x00783861 *)
     ARM32*   = 7877729;    (* "a4x" 0x00783461 *)
     RISCV64* = 7878774;    (* "v8x" 0x00783876 *)
     RISCV32* = 7877750;    (* "v4x" 0x00783476 *)
     WASM*    = 7877751;    (* "w4x" 0x00783477 *)
    BYTEORIENTED* = 0; WORDORIENTED* = 1;
    nostyle* = 0; oberonstyle* = 1; basicstyle* = 2; cstyle* = 3;
 
+++++++++
  Types  
+++++++++
.. code-block:: none
 

    Ident* = ARRAY IdLen OF CHAR;
 
++++++++++++
  Variables  
++++++++++++
.. code-block:: none
 
 ival*, slen*: LONGINT;  (*results of Get*)
    rval*: REAL;
    id*: Ident;  (*for identifiers*)
    str*: ARRAY stringBufSize OF CHAR;
    errcnt*: INTEGER;
    ccARCH*, ccWordsize, ccStackalign: INTEGER;
    ch: CHAR;  (*last character read*)
    errpos: LONGINT;
    R: Texts.Reader;
    W: Texts.Writer;
    commentstyle: INTEGER;
    sigCR, semiCR, haveRunes: BOOLEAN;
    k: INTEGER;
    KWX: ARRAY 10 OF INTEGER;
    keyTab: ARRAY NKW OF
        RECORD sym: INTEGER; id: ARRAY 12 OF CHAR END;
 
++++++++++++++++++++++++++++
  Functions and Procedures  
++++++++++++++++++++++++++++
.. code-block:: none
 
---
**SetSigCR** sets whether or not a carriage return or newline is significant.
::
  PROCEDURE SetSigCR*(sig: BOOLEAN);

---
**SetSemiCR** sets whether or not semicolons should be inferred at newlines.
::
  PROCEDURE SetSemiCR*(semi: BOOLEAN);

---
**SetRunes** sets whether or not to single-quote strings identify runes.
::
  PROCEDURE SetRunes*(runes: BOOLEAN);

---
**SetCommentStyle** sets the style of comments in the parser.
::
  PROCEDURE SetCommentStyle*(style: INTEGER);

---
**CopyId** duplicates an identifier.
::
  PROCEDURE CopyId*(VAR ident: Ident);

---
**Pos** reports the location in the source text not couting the most current character.
::
  PROCEDURE Pos*(): LONGINT;

---
**Mark** reports an error to the Oberon system log.
::
  PROCEDURE Mark*(msg: ARRAY OF CHAR);

---
**Note** places a note in the Oberon system log.
::
  PROCEDURE Note*(msg: ARRAY OF CHAR);

---
**Value** places a note in the Oberon system log.
::
  PROCEDURE Value*(msg: ARRAY OF CHAR; val: LONGINT);

---
**Identifier** matches an alphanumeric identifier.
::
  PROCEDURE Identifier(VAR sym: INTEGER);

---
**String** matches a quote delimeted string.
::
  PROCEDURE String;

---
**Rune** matches a single tick delimeted char.
::
  PROCEDURE Rune(VAR sym: INTEGER);

---
**HexString** matches a hex string.
::
  PROCEDURE HexString;

---
**Ten** ??
::
  PROCEDURE Ten(e: LONGINT): REAL;

---
**Number** matches a number.
::
  PROCEDURE Number(VAR sym: INTEGER);

---
**oberoncomment** matches Oberon style comments.
::
  PROCEDURE oberoncomment;

---
**clinecomment** matches C line style comments.
::
  PROCEDURE clinecomment;

---
**Get** gets the next symbol from the source text.
::
  PROCEDURE Get*(VAR sym: INTEGER);

---
**Init** opens the source text for reading and gets the first character.
::
  PROCEDURE Init*(T: Texts.Text; pos: LONGINT; a,b,c: INTEGER);

---
**EnterKW** adds a symbol to the keyword table.
::
  PROCEDURE EnterKW*(sym: INTEGER; name: ARRAY OF CHAR; kl: INTEGER);

---
**The initialzation code for this module** prepares an empty table of reserved keywords.
 
++++++++++++++++++++
  Development Guide 
++++++++++++++++++++
 

(NW 19.9.93 / 20.3.2017  Scanner in Oberon-07)

**OXS** is called from ORP, OXG, and OXB and converts the source text to symbols for their consumption.

Oberon Scanner does lexical analysis. Input is Oberon-Text, output is
sequence of symbols, i.e identifiers, numbers, strings, and special symbols.
Recognises all Oberon keywords and skips comments. The keywords are recorded in a table.

`Get(sym)` delivers next symbol from input text with Reader R.

`Mark(msg)` records error and delivers error message with Writer W.

If Get delivers ident, then the identifier (a string) is in variable id,
if int or char in ival, if real in rval, and if string in str (and slen)
 
https://github.com/io-core/Build/blob/main/OXS.Mod

