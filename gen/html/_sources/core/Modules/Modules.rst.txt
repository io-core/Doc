####################################
  Modules Module 
####################################
 
++++++++
  About  
++++++++
 
+++++++++++++++++
  Command Guide  
+++++++++++++++++
 

 
+++++++++++++
  API Guide  
+++++++++++++
 
++++++++++++++++
  Dependencies  
++++++++++++++++
 
.. code-block:: none
 
   SYSTEM Files
 
+++++++++++++
  Constants  
+++++++++++++
.. code-block:: none
 
 
    versionkey = 1X; MT = 12; DescSize = 80;
    BADARCH = 0;
    RISC5   = 6517618;    (* "rsc" 0x00637372 *)
    ERISC5  = 7878770;    (* "r8x" 0x00783872 *)
    X8664   = 7878761;    (* "i8x" 0x00783869 *)
    CORTEX4 = 7877731;    (* "c4x" 0x00783463 *)
    CORTEX0 = 7876707;    (* "c0x" 0x00783063 *)
    ARM64   = 7878753;    (* "a8x" 0x00783861 *)
    ARM32   = 7877729;    (* "a4x" 0x00783461 *)
    RISCV64 = 7878774;    (* "v8x" 0x00783876 *)
    RISCV32 = 7877750;    (* "v4x" 0x00783476 *)
    WASM    = 7877751;    (* "w4x" 0x00783477 *)
 
+++++++++
  Types  
+++++++++
.. code-block:: none
 
 Module* = POINTER TO ModDesc;
    Command* = PROCEDURE;
    ModuleName* = ARRAY 32 OF CHAR;

    ModDesc* = RECORD
        name*: ModuleName;
        next*: Module;
        key*, num*, size*, refcnt*: INTEGER;
        data*, code*, imp*, cmd*, ent*, ptr*, unused: INTEGER  (*addresses*)
      END ;
 
++++++++++++
  Variables  
++++++++++++
.. code-block:: none
 
 root*, binroot, M: Module;
    MTOrg*, AllocPtr*, res*: INTEGER;
    importing*, imported*: ModuleName;
    limit: INTEGER;
    binMTOrg, binStart, binAllocPtr: INTEGER;
(*  W: Texts.Writer; *)
    Mlist: ARRAY 16 OF ModuleName;
    heapOrg: INTEGER;
 
++++++++++++++++++++++++++++
  Functions and Procedures  
++++++++++++++++++++++++++++
.. code-block:: none
 
::
  PROCEDURE Debug(s: ARRAY OF CHAR);

::
  PROCEDURE Dln;

::
  PROCEDURE ThisFile(name: ARRAY OF CHAR): Files.File;

::
  PROCEDURE ThisBinFile(name: ARRAY OF CHAR): Files.File;

::
  PROCEDURE error(n: INTEGER; name: ARRAY OF CHAR);

::
  PROCEDURE Check(s: ARRAY OF CHAR);

::
  PROCEDURE LoadOne(name: ARRAY OF CHAR; VAR newmod, rootmod: Module);

::
  PROCEDURE Load*(name: ARRAY OF CHAR; VAR newmod: Module);

::
  PROCEDURE zero( VAR s: ARRAY OF CHAR);

::
  PROCEDURE LinkOne*(name: ARRAY OF CHAR; VAR newmod, rootmod: Module);

::
  PROCEDURE Link*(s: ARRAY OF CHAR; VAR rv: INTEGER);

::
  PROCEDURE ThisCommand*(mod: Module; name: ARRAY OF CHAR): Command;

::
  PROCEDURE Free*(name: ARRAY OF CHAR);

::
  PROCEDURE Init*;
 
++++++++++++++++++++
  Development Guide 
++++++++++++++++++++
 

 
https://github.com/io-core/Modules/blob/main/Modules.Mod

